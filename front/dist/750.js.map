{"version":3,"sources":["webpack://alecture/./hooks/useInput.ts","webpack://alecture/./pages/SignUp/styles.tsx","webpack://alecture/./utils/fetcher.ts"],"names":["initialData","value","setValue","useState","useCallback","e","target","Header","Form","Label","Input","Button","Error","Success","LinkContainer","url","axios","withCredentials","then","response","data"],"mappings":"kIAGA,MAQA,EAR2BA,IACzB,MAAOC,EAAOC,IAAYC,cAASH,GAInC,MAAO,CAACC,GAHQG,kBAAaC,IAC3BH,EAASG,EAAEC,OAAOL,SACjB,IACqBC,K,2HCNnB,MAAMK,GAAS,iBAAH,mBAAG,CAAH,2OAWNC,GAAO,eAAH,mBAAG,CAAH,qEAMJC,GAAQ,gBAAH,mBAAG,CAAH,6KAaLC,GAAQ,gBAAH,mBAAG,CAAH,ulBAsBLC,GAAS,iBAAH,mBAAG,CAAH,ogBA4BNC,GAAQ,cAAH,mBAAG,CAAH,4EAMLC,GAAU,cAAH,mBAAG,CAAH,0DAKPC,GAAgB,YAAH,mBAAG,CAAH,kM,oEC3F1B,MAOA,EAPiBC,GACfC,QACOD,EAAK,CACRE,iBAAiB,IAElBC,MAAMC,GAAaA,EAASC","file":"750.js","sourcesContent":["import { Dispatch, SetStateAction, useCallback, useState } from 'react';\r\n\r\ntype ReturnTypes<T=any> = [T, (e: any) => void, Dispatch<SetStateAction<T>>]\r\nconst useInput = <T = any>(initialData: T): ReturnTypes<T> => {\r\n  const [value, setValue] = useState(initialData);\r\n  const handler = useCallback((e) => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n  return [value, handler, setValue];\r\n};\r\n\r\nexport default useInput;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Header = styled.header`\r\n  text-align: center;\r\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\r\n  font-weight: 700;\r\n  font-size: 48px;\r\n  line-height: 46px;\r\n  letter-spacing: -0.75px;\r\n  margin-top: 50px;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  margin: 0 auto;\r\n  width: 400px;\r\n  max-width: 400px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  margin-bottom: 16px;\r\n  & > span {\r\n    display: block;\r\n    text-align: left;\r\n    padding-bottom: 8px;\r\n    font-size: 15px;\r\n    cursor: pointer;\r\n    line-height: 1.46666667;\r\n    font-weight: 700;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  border-radius: 4px;\r\n  --saf-0: rgba(var(--sk_foreground_high_solid, 134, 134, 134), 1);\r\n  border: 1px solid var(--saf-0);\r\n  transition: border 80ms ease-out, box-shadow 80ms ease-out;\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px;\r\n  width: 100%;\r\n  color: rgba(var(--sk_primary_foreground, 29, 28, 29), 1);\r\n  background-color: rgba(var(--sk_primary_background, 255, 255, 255), 1);\r\n  padding: 12px;\r\n  height: 44px;\r\n  padding-top: 11px;\r\n  padding-bottom: 13px;\r\n  font-size: 18px;\r\n  line-height: 1.33333333;\r\n  &:focus {\r\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin-bottom: 12px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  color: #fff;\r\n  background-color: #4a154b;\r\n  border: none;\r\n  font-size: 18px;\r\n  font-weight: 900;\r\n  height: 44px;\r\n  min-width: 96px;\r\n  padding: 0 16px 3px;\r\n  transition: all 80ms linear;\r\n  user-select: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\r\n  &:hover {\r\n    background-color: rgba(74, 21, 75, 0.9);\r\n    border: none;\r\n  }\r\n  &:focus {\r\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\r\n  }\r\n`;\r\n\r\nexport const Error = styled.div`\r\n  color: #e01e5a;\r\n  margin: 8px 0 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const Success = styled.div`\r\n  color: #2eb67d;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const LinkContainer = styled.p`\r\n  font-size: 13px;\r\n  color: #616061;\r\n  margin: 0 auto 8px;\r\n  width: 400px;\r\n  max-width: 400px;\r\n  & a {\r\n    color: #1264a3;\r\n    text-decoration: none;\r\n    font-weight: 700;\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n`;\r\n","import axios from 'axios';\r\n\r\nconst fetcher = (url: string) =>\r\n  axios\r\n    .get(url, {\r\n      withCredentials: true,\r\n    })\r\n    .then((response) => response.data);\r\n\r\nexport default fetcher;"],"sourceRoot":""}