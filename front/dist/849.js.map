{"version":3,"sources":["webpack://alecture/./components/InviteChannelModal/index.tsx","webpack://alecture/./components/Modal/styles.tsx","webpack://alecture/./components/Modal/index.tsx","webpack://alecture/./hooks/useSocket.ts","webpack://alecture/./layouts/Workspace/styles.tsx","webpack://alecture/./components/Menu/styles.tsx","webpack://alecture/./components/Menu/index.tsx","webpack://alecture/./components/CreateChannelModal/index.tsx","webpack://alecture/./components/InviteWorkspace/index.tsx","webpack://alecture/./components/DMList/styles.tsx","webpack://alecture/./components/ChannelList/index.tsx","webpack://alecture/./components/DMList/index.tsx","webpack://alecture/./layouts/Workspace/index.tsx"],"names":["show","onCloseModal","setShowInviteChannelModal","workspace","channel","useParams","newMember","onChangeNewMember","setNewMember","useInput","data","userData","useSWR","fetcher","revalidate","revalidateMembers","onInviteMember","useCallback","e","preventDefault","trim","axios","email","then","catch","error","console","dir","toast","response","position","onSubmit","id","value","onChange","type","CreateModal","CloseModalButton","children","stopPropagation","onClick","sockets","disconnect","io","transports","undefined","RightMenu","Header","ProfileImg","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","Channels","WorkspaceName","MenuScroll","WorkspaceModal","Chats","AddButton","WorkspaceButton","CreateMenu","Menu","style","closeButton","defaultProps","setShowCreateChannelModal","newChannel","onChangeNewChannel","setNewChannel","mutate","dedupingInterval","channelData","revalidateChannel","onCreateChannel","name","withCredentials","Modal","setShowInviteWorkspaceModal","revalidateMember","CollapseButton","collapse","channelCollapse","setChannelCollapse","useState","toggleChannelCollapse","prev","className","data-qa","aria-hidden","map","key","activeClassName","to","memberData","socket","useSocket","onlineList","setOnlineList","useEffect","log","on","off","member","isOnline","includes","data-qa-presence-self","data-qa-presence-active","data-qa-presence-dnd","nickname","Channel","loadable","DirectMessage","showUserMenu","setShowUserMenu","showCreateWorkspaceModal","setShowCreateWorkspaceModal","showInviteWorkspaceModal","showInviteChannelModal","showWorkspaceModal","setShowWorkspaceModal","showCreateChannelModal","newWorkspace","onChangeNewWorkspace","setNewWorkspace","newUrl","onChangeNewUrl","setNewUrl","emit","channels","v","onLogout","onCloseUserProfile","onClickUserProfile","onClickCreateWorkspace","onCreateWorkspace","url","toggleWorkspaceModal","onClickAddChannel","onClickInviteWorkspace","src","gravatar","s","d","alt","right","top","ws","slice","toUpperCase","left","path","component","InviteWorkspace","InviteChannelModal"],"mappings":"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","file":"849.js","sourcesContent":["import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { FC, useCallback } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowInviteChannelModal: (flag: boolean) => void;\r\n}\r\nconst InviteChannelModal: FC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\r\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\r\n  const { revalidate: revalidateMembers } = useSWR<IUser[]>(\r\n    userData && channel ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const onInviteMember = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newMember || !newMember.trim()) {\r\n        return;\r\n      }\r\n      axios\r\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\r\n          email: newMember,\r\n        })\r\n        .then(() => {\r\n          revalidateMembers();\r\n          setShowInviteChannelModal(false);\r\n          setNewMember('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [newMember],\r\n  );\r\n\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onInviteMember}>\r\n        <Label id=\"member-label\">\r\n          <span>채널 멤버 초대</span>\r\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\r\n        </Label>\r\n        <Button type=\"submit\">초대하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default InviteChannelModal;","import styled from '@emotion/styled';\r\n\r\nexport const CreateModal = styled.div`\r\n  position: fixed;\r\n  text-align: center;\r\n  left: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: 1022;\r\n  & > div {\r\n    margin-top: 200px;\r\n    display: inline-block;\r\n    width: 440px;\r\n    background: white;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\r\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\r\n    border-radius: 6px;\r\n    user-select: none;\r\n    max-width: 440px;\r\n    padding: 30px 40px 0;\r\n    z-index: 1012;\r\n    position: relative;\r\n  }\r\n`;\r\n\r\nexport const CloseModalButton = styled.button`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 6px;\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 30px;\r\n  cursor: pointer;\r\n`;","import { CreateModal, CloseModalButton } from '@components/Modal/styles';\r\nimport React, { FC, useCallback } from 'react';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n}\r\n\r\nconst Modal: FC<Props> = ({ show, children, onCloseModal }) => {\r\n  const stopPropagation = useCallback((e) => {\r\n    e.stopPropagation();\r\n  }, []);\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n  return (\r\n    <CreateModal onClick={onCloseModal}>\r\n      <div onClick={stopPropagation}>\r\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\r\n        {children}\r\n      </div>\r\n    </CreateModal>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import io from 'socket.io-client';\r\nimport { useCallback } from 'react';\r\n\r\nconst backUrl = 'http://localhost:3095';\r\n\r\nconst sockets:{ [key: string]: SocketIOClient.Socket } = {};\r\nconst useSocket = (workspace?: string): [SocketIOClient.Socket | undefined, () => void] => {\r\n  const disconnect = useCallback(() => {\r\n    if (workspace) {\r\n      sockets[workspace].disconnect();\r\n      delete sockets[workspace];\r\n    }\r\n  }, [workspace]);\r\n\r\n  if (!workspace) {\r\n    return [undefined, disconnect];\r\n  }\r\n  if(!sockets[workspace]) {\r\n    sockets[workspace] = io.connect(`${backUrl}/ws-${workspace}`, {\r\n      transports: ['websocket'],\r\n    });\r\n  }\r\n\r\n  return [sockets[workspace], disconnect];\r\n};\r\n\r\nexport default useSocket;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const RightMenu = styled.div`\r\n  float: right;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 38px;\r\n  background: #350d36;\r\n  color: #ffffff;\r\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n  padding: 5px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const ProfileImg = styled.img`\r\n  width: 28px;\r\n  height: 28px;\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 16px;\r\n`;\r\n\r\nexport const ProfileModal = styled.div`\r\n  display: flex;\r\n  padding: 20px;\r\n  & img {\r\n    display: flex;\r\n  }\r\n  & > div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-left: 10px;\r\n  }\r\n  & #profile-name {\r\n    font-weight: bold;\r\n    display: inline-flex;\r\n  }\r\n  & #profile-active {\r\n    font-size: 13px;\r\n    display: inline-flex;\r\n  }\r\n`;\r\n\r\nexport const LogOutButton = styled.button`\r\n  border: none;\r\n  width: 100%;\r\n  border-top: 1px solid rgb(29, 28, 29);\r\n  background: transparent;\r\n  display: block;\r\n  height: 33px;\r\n  padding: 5px 20px 5px;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const WorkspaceWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n`;\r\n\r\nexport const Workspaces = styled.div`\r\n  width: 65px;\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #3f0e40;\r\n  border-top: 1px solid rgb(82, 38, 83);\r\n  border-right: 1px solid rgb(82, 38, 83);\r\n  vertical-align: top;\r\n  text-align: center;\r\n  padding: 15px 0 0;\r\n`;\r\n\r\nexport const Channels = styled.nav`\r\n  width: 260px;\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  background: #3f0e40;\r\n  color: rgb(188, 171, 188);\r\n  vertical-align: top;\r\n  & a {\r\n    padding-left: 36px;\r\n    color: inherit;\r\n    text-decoration: none;\r\n    height: 28px;\r\n    line-height: 28px;\r\n    display: flex;\r\n    align-items: center;\r\n    &.selected {\r\n      color: white;\r\n    }\r\n  }\r\n  & .bold {\r\n    color: white;\r\n    font-weight: bold;\r\n  }\r\n  & .count {\r\n    margin-left: auto;\r\n    background: #cd2553;\r\n    border-radius: 16px;\r\n    display: inline-block;\r\n    font-size: 12px;\r\n    font-weight: 700;\r\n    height: 18px;\r\n    line-height: 18px;\r\n    padding: 0 9px;\r\n    color: white;\r\n    margin-right: 16px;\r\n  }\r\n  & h2 {\r\n    height: 36px;\r\n    line-height: 36px;\r\n    margin: 0;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    font-size: 15px;\r\n  }\r\n`;\r\n\r\nexport const WorkspaceName = styled.button`\r\n  height: 64px;\r\n  line-height: 64px;\r\n  border: none;\r\n  width: 100%;\r\n  text-align: left;\r\n  border-top: 1px solid rgb(82, 38, 83);\r\n  border-bottom: 1px solid rgb(82, 38, 83);\r\n  font-weight: 900;\r\n  font-size: 24px;\r\n  background: transparent;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  padding: 0;\r\n  padding-left: 16px;\r\n  margin: 0;\r\n  color: white;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const MenuScroll = styled.div`\r\n  height: calc(100vh - 102px);\r\n  overflow-y: auto;\r\n`;\r\n\r\nexport const WorkspaceModal = styled.div`\r\n  padding: 10px 0 0;\r\n  & h2 {\r\n    padding-left: 20px;\r\n  }\r\n  & > button {\r\n    width: 100%;\r\n    height: 28px;\r\n    padding: 4px;\r\n    border: none;\r\n    background: transparent;\r\n    border-top: 1px solid rgb(28, 29, 28);\r\n    cursor: pointer;\r\n    &:last-of-type {\r\n      border-bottom: 1px solid rgb(28, 29, 28);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Chats = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nexport const AddButton = styled.button`\r\n  color: white;\r\n  font-size: 24px;\r\n  display: inline-block;\r\n  width: 40px;\r\n  height: 40px;\r\n  background: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const WorkspaceButton = styled.button`\r\n  display: inline-block;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background: white;\r\n  border: 3px solid #3f0e40;\r\n  margin-bottom: 15px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  color: black;\r\n  cursor: pointer;\r\n`;","import styled from '@emotion/styled';\r\n\r\nexport const CreateMenu = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  z-index: 1000;\r\n  & > div {\r\n    position: absolute;\r\n    display: inline-block;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\r\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\r\n    border-radius: 6px;\r\n    user-select: none;\r\n    min-width: 360px;\r\n    z-index: 512;\r\n    max-height: calc(100vh - 20px);\r\n    color: rgb(29, 28, 29);\r\n  }\r\n`;\r\n\r\nexport const CloseModalButton = styled.button`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 6px;\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 30px;\r\n  cursor: pointer;\r\n`;","import React, { CSSProperties, FC, useCallback } from 'react';\r\nimport { CloseModalButton, CreateMenu } from './styles';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: (e: any) => void;\r\n  style: CSSProperties;\r\n  closeButton?: boolean;\r\n}\r\n\r\nconst Menu: FC<Props> = ({ children, style, show, onCloseModal, closeButton }) => {\r\n    const stopPropagation = useCallback((e) => {\r\n        e.stopPropagation();\r\n    }, [])\r\n\r\n  if(!show) return null;\r\n\r\n  return (\r\n    <CreateMenu onClick={onCloseModal}>\r\n      <div style={style} onClick={stopPropagation}>\r\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\r\n        {children}\r\n      </div>\r\n    </CreateMenu>\r\n  );\r\n};\r\n\r\nMenu.defaultProps = {\r\n    closeButton: true,\r\n}\r\n\r\nexport default Menu;\r\n","import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { useCallback, VFC } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowCreateChannelModal: (flag: boolean) => void;\r\n}\r\n\r\nconst CreateChannelModal: VFC<Props> = ({ show, onCloseModal, setShowCreateChannelModal }) => {\r\n  const [newChannel, onChangeNewChannel, setNewChannel] = useInput('');\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n  const { data: userData, error, revalidate, mutate } = useSWR<IUser | false>(\r\n    '/api/users',\r\n    fetcher,\r\n    {\r\n      dedupingInterval: 2000,\r\n    },\r\n  );\r\n  const { data: channelData, revalidate: revalidateChannel } = useSWR<IChannel[]>(\r\n    userData ? `/api/workspaces/${workspace}/channels` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const onCreateChannel = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      axios\r\n        .post(\r\n          `/api/workspaces/${workspace}/channels`,\r\n          {\r\n            name: newChannel,\r\n          },\r\n          {\r\n            withCredentials: true,\r\n          },\r\n        )\r\n        .then(() => {\r\n          setShowCreateChannelModal(false);\r\n          revalidateChannel();\r\n          setNewChannel('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [newChannel],\r\n  );\r\n\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onCreateChannel}>\r\n        <Label id=\"channel-label\">\r\n          <span>채널</span>\r\n          <Input id=\"workspace\" value={newChannel} onChange={onChangeNewChannel} />\r\n        </Label>\r\n        <Button type=\"submit\">생성하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CreateChannelModal;\r\n","import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { FC, useCallback } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowInviteWorkspaceModal: (flag: boolean) => void;\r\n}\r\nconst InviteWorkspaceModal: FC<Props> = ({ show, onCloseModal, setShowInviteWorkspaceModal }) => {\r\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\r\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\r\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\r\n  const { revalidate: revalidateMember } = useSWR<IChannel[]>(\r\n    userData ? `/api/workspaces/${workspace}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const onInviteMember = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newMember || !newMember.trim()) {\r\n        return;\r\n      }\r\n      axios\r\n        .post(`/api/workspaces/${workspace}/members`, {\r\n          email: newMember,\r\n        })\r\n        .then((response) => {\r\n          revalidateMember();\r\n          setShowInviteWorkspaceModal(false);\r\n          setNewMember('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [workspace, newMember],\r\n  );\r\n\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onInviteMember}>\r\n        <Label id=\"member-label\">\r\n          <span>이메일</span>\r\n          <Input id=\"member\" type=\"email\" value={newMember} onChange={onChangeNewMember} />\r\n        </Label>\r\n        <Button type=\"submit\">초대하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default InviteWorkspaceModal;","import styled from '@emotion/styled';\r\n\r\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\r\n  background: transparent;\r\n  border: none;\r\n  width: 26px;\r\n  height: 26px;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  margin-left: 10px;\r\n  cursor: pointer;\r\n  ${({ collapse }) =>\r\n    collapse &&\r\n    `\r\n    & i {\r\n      transform: none;\r\n    }\r\n  `};\r\n`;","import { CollapseButton } from '@components/DMList/styles';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport React, { FC, useCallback, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport useSWR from 'swr';\r\n\r\nconst ChannelList: FC = () => {\r\n  const { workspace } = useParams<{ workspace?: string }>();\r\n  // const [socket] = useSocket(workspace);\r\n  const { data: userData, error, revalidate, mutate } = useSWR<IUser>('/api/users', fetcher, {\r\n    dedupingInterval: 2000, // 2초\r\n  });\r\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\r\n  const [channelCollapse, setChannelCollapse] = useState(false);\r\n\r\n  const toggleChannelCollapse = useCallback(() => {\r\n    setChannelCollapse((prev) => !prev);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h2>\r\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\r\n          <i\r\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\r\n            data-qa=\"channel-section-collapse\"\r\n            aria-hidden=\"true\"\r\n          />\r\n        </CollapseButton>\r\n        <span>Channels</span>\r\n      </h2>\r\n      <div>\r\n        {!channelCollapse &&\r\n          channelData?.map((channel) => {\r\n            return (\r\n              <NavLink\r\n                key={channel.name}\r\n                activeClassName=\"selected\"\r\n                to={`/workspace/${workspace}/channel/${channel.name}`}\r\n              >\r\n                <span># {channel.name}</span>\r\n              </NavLink>\r\n            );\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChannelList;","import { CollapseButton } from '@components/DMList/styles';\r\nimport useSocket from '@hooks/useSocket';\r\nimport { IUser, IUserWithOnline } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport React, { FC, useCallback, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport useSWR from 'swr';\r\n\r\nconst DMList: FC = () => {\r\n  const { workspace } = useParams<{ workspace?: string }>();\r\n  const { data: userData, error, revalidate, mutate } = useSWR<IUser>('/api/users', fetcher, {\r\n    dedupingInterval: 2000, // 2초\r\n  });\r\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\r\n    userData ? `/api/workspaces/${workspace}/members` : null,\r\n    fetcher,\r\n  );\r\n  const [socket] = useSocket(workspace);\r\n  const [channelCollapse, setChannelCollapse] = useState(false);\r\n  const [onlineList, setOnlineList] = useState<number[]>([]);\r\n\r\n  const toggleChannelCollapse = useCallback(() => {\r\n    setChannelCollapse((prev) => !prev);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log('DMList: workspace 바꼈다', workspace);\r\n    setOnlineList([]);\r\n  }, [workspace]);\r\n\r\n  useEffect(() => {\r\n    socket?.on('onlineList', (data: number[]) => {\r\n      setOnlineList(data);\r\n    });\r\n    // socket?.on('dm', onMessage)\r\n    // console.log('socket on dm', socket?.hasListeners('dm'), socket)\r\n    return () => {\r\n      // socket?.off('dm', onMessage)\r\n      // console.log('socket off dm', socket?.hasListeners('dm'))\r\n      socket?.off('onlineList');\r\n    };\r\n  }, [socket]);\r\n\r\n  return (\r\n    <>\r\n      <h2>\r\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\r\n          <i\r\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\r\n            data-qa=\"channel-section-collapse\"\r\n            aria-hidden=\"true\"\r\n          />\r\n        </CollapseButton>\r\n        <span>Direct Messages</span>\r\n      </h2>\r\n      <div>\r\n        {!channelCollapse &&\r\n          memberData?.map((member) => {\r\n            const isOnline = onlineList.includes(member.id);\r\n            return (\r\n              <NavLink key={member.id} activeClassName=\"selected\" to={`/workspace/${workspace}/dm/${member.id}`}>\r\n                <i\r\n                  className={`c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence ${\r\n                    isOnline ? 'c-presence--active c-icon--presence-online' : 'c-icon--presence-offline'\r\n                  }`}\r\n                  aria-hidden=\"true\"\r\n                  data-qa=\"presence_indicator\"\r\n                  data-qa-presence-self=\"false\"\r\n                  data-qa-presence-active=\"false\"\r\n                  data-qa-presence-dnd=\"false\"\r\n                />\r\n                <span>{member.nickname}</span>\r\n                {member.id === userData?.id && <span> (나)</span>}\r\n              </NavLink>\r\n            );\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DMList;\r\n","import {\r\n  AddButton,\r\n  Channels,\r\n  Chats,\r\n  Header,\r\n  LogOutButton,\r\n  MenuScroll,\r\n  ProfileImg,\r\n  ProfileModal,\r\n  RightMenu,\r\n  WorkspaceButton,\r\n  WorkspaceModal,\r\n  WorkspaceName,\r\n  Workspaces,\r\n  WorkspaceWrapper,\r\n} from '@layouts/Workspace/styles';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { FC, useCallback, useEffect, useState, VFC } from 'react';\r\nimport { Redirect, Route, Switch, useParams } from 'react-router';\r\nimport useSWR, { mutate } from 'swr';\r\nimport gravatar from 'gravatar';\r\nimport loadable from '@loadable/component';\r\nimport Menu from '@components/Menu';\r\nimport { Link } from 'react-router-dom';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport useInput from '@hooks/useInput';\r\nimport Modal from '@components/Modal';\r\nimport { toast } from 'react-toastify';\r\nimport CreateChannelModal from '@components/CreateChannelModal';\r\nimport InviteWorkspaceModal from '@components/InviteWorkspace';\r\nimport InviteChannelModal from '@components/InviteChannelModal';\r\nimport ChannelList from '@components/ChannelList';\r\nimport DMList from '@components/DMList';\r\nimport useSocket from '@hooks/useSocket';\r\n\r\nconst Channel = loadable(() => import('@pages/Channel'));\r\nconst DirectMessage = loadable(() => import('@pages/DirectMessage'));\r\n\r\nconst Workspace: VFC = () => {\r\n  const [showUserMenu, setShowUserMenu] = useState(false);\r\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\r\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] = useState(false);\r\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\r\n  const [showWorkspaceModal, setShowWorkspaceModal] = useState(false);\r\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\r\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkspace] = useInput('');\r\n  const [newUrl, onChangeNewUrl, setNewUrl] = useInput('');\r\n\r\n  const { workspace } = useParams<{ workspace: string }>();\r\n  const { data: userData, error, revalidate, mutate } = useSWR<IUser | false>('/api/users', fetcher, {\r\n    dedupingInterval: 2000,\r\n  });\r\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\r\n\r\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\r\n\r\n  const [socket, disconnect] = useSocket(workspace);\r\n\r\n  useEffect(() => {\r\n    if (channelData && userData && socket) {\r\n      socket.emit('login', { id: userData.id, channels: channelData.map((v) => v.id) });\r\n    }\r\n  }, [socket, channelData, userData]);\r\n  useEffect(() => {\r\n    return () => {\r\n      disconnect();\r\n    }\r\n  }, [workspace, disconnect]);\r\n\r\n  const onLogout = useCallback(() => {\r\n    axios\r\n      .post('/api/users/logout', null, {\r\n        withCredentials: true,\r\n      })\r\n      .then(() => {\r\n        mutate(false, false);\r\n      });\r\n  }, []);\r\n\r\n  const onCloseUserProfile = useCallback((e) => {\r\n    e.stopPropagation();\r\n    setShowUserMenu(false);\r\n  }, []);\r\n\r\n  const onClickUserProfile = useCallback(() => {\r\n    setShowUserMenu((prev) => !prev);\r\n  }, []);\r\n\r\n  const onClickCreateWorkspace = useCallback(() => {\r\n    setShowCreateWorkspaceModal(true);\r\n  }, []);\r\n\r\n  const onCreateWorkspace = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newWorkspace || !newWorkspace.trim()) return; // trim() 띄어쓰기 체크\r\n      if (!newUrl || !newUrl.trim()) return;\r\n      axios\r\n        .post('/api/workspaces/', {\r\n          workspace: newWorkspace,\r\n          url: newUrl,\r\n        })\r\n        .then(() => {\r\n          revalidate();\r\n          setShowCreateWorkspaceModal(false);\r\n          setNewWorkspace('');\r\n          setNewUrl('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, {\r\n            position: 'bottom-center',\r\n          });\r\n        });\r\n    },\r\n    [newWorkspace, newUrl],\r\n  );\r\n\r\n  const onCloseModal = useCallback(() => {\r\n    setShowCreateWorkspaceModal(false);\r\n    setShowCreateChannelModal(false);\r\n    setShowInviteWorkspaceModal(false);\r\n    setShowInviteChannelModal(false);\r\n  }, []);\r\n\r\n  const toggleWorkspaceModal = useCallback(() => {\r\n    setShowWorkspaceModal((prev) => !prev);\r\n  }, []);\r\n\r\n  const onClickAddChannel = useCallback(() => {\r\n    setShowCreateChannelModal(true);\r\n  }, []);\r\n\r\n  const onClickInviteWorkspace = useCallback(() => {\r\n    setShowInviteWorkspaceModal(true);\r\n  }, []);\r\n\r\n  if (!userData) {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header>\r\n        <RightMenu>\r\n          <span onClick={onClickUserProfile}>\r\n            <ProfileImg src={gravatar.url(userData.email, { s: '28px', d: 'retro' })} alt={userData.nickname} />\r\n            {showUserMenu && (\r\n              <Menu style={{ right: 0, top: 38 }} show={showUserMenu} onCloseModal={onCloseUserProfile}>\r\n                <ProfileModal>\r\n                  <img src={gravatar.url(userData.email, { s: '28px', d: 'retro' })} alt={userData.nickname} />\r\n                  <div>\r\n                    <span id=\"profile-name\">{userData.nickname}</span>\r\n                    <span id=\"profile-active\">Active</span>\r\n                  </div>\r\n                </ProfileModal>\r\n                <LogOutButton onClick={onLogout}>로그아웃</LogOutButton>\r\n              </Menu>\r\n            )}\r\n          </span>\r\n        </RightMenu>\r\n      </Header>\r\n      <WorkspaceWrapper>\r\n        <Workspaces>\r\n          {userData.Workspaces &&\r\n            userData?.Workspaces.map((ws) => {\r\n              return (\r\n                <Link key={ws.id} to={`/workspace/${123}/channel/일반`}>\r\n                  <WorkspaceButton>{ws.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\r\n                </Link>\r\n              );\r\n            })}\r\n          <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\r\n        </Workspaces>\r\n        <Channels>\r\n          <WorkspaceName onClick={toggleWorkspaceModal}>Sleact</WorkspaceName>\r\n          <MenuScroll>\r\n            <Menu show={showWorkspaceModal} onCloseModal={toggleWorkspaceModal} style={{ top: 95, left: 80 }}>\r\n              <WorkspaceModal>\r\n                <h2>Sleact</h2>\r\n                <button onClick={onClickInviteWorkspace}>워크스페이스에 사용자 초대</button>\r\n                <button onClick={onClickAddChannel}>채널 만들기</button>\r\n                <button onClick={onLogout}>로그아웃</button>\r\n              </WorkspaceModal>\r\n            </Menu>\r\n            <ChannelList />\r\n            <DMList />\r\n          </MenuScroll>\r\n        </Channels>\r\n        <Chats>\r\n          <Switch>\r\n            <Route path=\"/workspace/:workspace/channel/:channel\" component={Channel} />\r\n            <Route path=\"/workspace/:workspace/dm/:id\" component={DirectMessage} />\r\n          </Switch>\r\n        </Chats>\r\n      </WorkspaceWrapper>\r\n      <Modal show={showCreateWorkspaceModal} onCloseModal={onCloseModal}>\r\n        <form onSubmit={onCreateWorkspace}>\r\n          <Label id=\"workspace-label\">\r\n            <span>워크스페이스 이름</span>\r\n            <Input id=\"workspace\" value={newWorkspace} onChange={onChangeNewWorkspace} />\r\n          </Label>\r\n          <Label id=\"workspace-url-label\">\r\n            <span>워크스페이스 url</span>\r\n            <Input id=\"workspace\" value={newUrl} onChange={onChangeNewUrl} />\r\n          </Label>\r\n          <Button type=\"submit\">생성하기</Button>\r\n        </form>\r\n      </Modal>\r\n      <CreateChannelModal\r\n        show={showCreateChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowCreateChannelModal={setShowCreateChannelModal}\r\n      />\r\n      <InviteWorkspaceModal\r\n        show={showInviteWorkspaceModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteWorkspaceModal={setShowInviteWorkspaceModal}\r\n      />\r\n      <InviteChannelModal\r\n        show={showInviteChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteChannelModal={setShowInviteChannelModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Workspace;\r\n"],"sourceRoot":""}