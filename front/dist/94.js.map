{"version":3,"sources":["webpack://alecture/./pages/DirectMessage/styles.tsx","webpack://alecture/./pages/DirectMessage/index.tsx"],"names":["Container","Header","DragOver","workspace","id","useParams","data","userData","useSWR","fetcher","myData","chat","onChangeChat","setChat","useInput","chatData","mutate","mutateChat","revalidate","setSize","useSWRInfinite","index","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","dragOver","setDragOver","useState","onSubmitForm","useCallback","e","preventDefault","console","log","trim","savedChat","prevChatData","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","current","scrollToBottom","axios","catch","error","onMessage","Number","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","name","append","files","onDragOver","chatSections","makeSection","flat","reverse","src","gravatar","email","s","d","alt","nickname","ChatList","ref","ChatBox"],"mappings":"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","file":"94.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: calc(100vh - 38px);\r\n  flex-flow: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 64px;\r\n  display: flex;\r\n  width: 100%;\r\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n  box-shadow: 0 1px 0 var(--saf-0);\r\n  padding: 20px 16px 20px 20px;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n\r\nexport const DragOver = styled.div`\r\n  position: absolute;\r\n  top: 64px;\r\n  left: 0;\r\n  width: 100%;\r\n  height: calc(100% - 64px);\r\n  background: white;\r\n  opacity: 0.7;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 40px;\r\n`;","import ChatBox from '@components/ChatBox';\r\nimport ChatList from '@components/ChatList';\r\nimport useInput from '@hooks/useInput';\r\nimport useSocket from '@hooks/useSocket';\r\nimport { Container, Header, DragOver } from '@pages/DirectMessage/styles';\r\nimport { IDM } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport makeSection from '@utils/makeSection';\r\nimport axios from 'axios';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport gravatar from 'gravatar';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport { useParams } from 'react-router';\r\nimport useSWR, { useSWRInfinite } from 'swr';\r\n\r\nconst DirectMessage = () => {\r\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\r\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\r\n  const { data: myData } = useSWR('/api/users', fetcher);\r\n  const [chat, onChangeChat, setChat] = useInput('');\r\n  const { data: chatData, mutate: mutateChat, revalidate, setSize } = useSWRInfinite<IDM[]>(\r\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\r\n    fetcher,\r\n  );\r\n  const [socket] = useSocket(workspace);\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n  const [dragOver, setDragOver] = useState(false);\r\n\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      console.log(chat);\r\n      if (chat?.trim() && chatData) {\r\n        const savedChat = chat;\r\n        mutateChat((prevChatData) => {\r\n          prevChatData?.[0].unshift({\r\n            id: (chatData[0][0]?.id || 0) + 1,\r\n            content: savedChat,\r\n            SenderId: myData.id,\r\n            Sender: myData,\r\n            ReceiverId: userData.id,\r\n            Receiver: userData,\r\n            createdAt: new Date(),\r\n          });\r\n          return prevChatData;\r\n        }, false).then(() => {\r\n          setChat('');\r\n          scrollbarRef.current?.scrollToBottom();\r\n        });\r\n        axios\r\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\r\n            content: chat,\r\n          })\r\n          .then(() => {\r\n            revalidate();\r\n          })\r\n          .catch(console.error);\r\n      }\r\n    },\r\n    [chat, chatData, myData, userData, workspace, id],\r\n  );\r\n\r\n  const onMessage = useCallback((data: IDM) => {\r\n    // id는 상대방 아이디\r\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\r\n      mutateChat((chatData) => {\r\n        chatData?.[0].unshift(data);\r\n        return chatData;\r\n      }, false).then(() => {\r\n        if (scrollbarRef.current) {\r\n          if (\r\n            scrollbarRef.current.getScrollHeight() <\r\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\r\n          ) {\r\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n            setTimeout(() => {\r\n              scrollbarRef.current?.scrollToBottom();\r\n            }, 50);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket?.on('dm', onMessage);\r\n    return () => {\r\n      socket?.off('dm', onMessage);\r\n    };\r\n  }, [socket, onMessage]);\r\n\r\n  // 로딩 시 스크롤바 제일 아래로\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      setTimeout(() => {\r\n        scrollbarRef.current?.scrollToBottom();\r\n      }, 100);\r\n    }\r\n  }, [chatData]);\r\n\r\n  const onDrop = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      console.log(e);\r\n      const formData = new FormData();\r\n      if (e.dataTransfer.items) {\r\n        // Use DataTransferItemList interface to access the file(s)\r\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\r\n          // If dropped items aren't files, reject them\r\n          if (e.dataTransfer.items[i].kind === 'file') {\r\n            const file = e.dataTransfer.items[i].getAsFile();\r\n            console.log('... file[' + i + '].name = ' + file.name);\r\n            formData.append('image', file);\r\n          }\r\n        }\r\n      } else {\r\n        // Use DataTransfer interface to access the file(s)\r\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\r\n          console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\r\n          formData.append('image', e.dataTransfer.files[i]);\r\n        }\r\n      }\r\n      axios.post(`/api/workspaces/${workspace}/dms/${id}/images`, formData).then(() => {\r\n        setDragOver(false);\r\n        revalidate();\r\n      });\r\n    },\r\n    [revalidate, workspace, id],\r\n  );\r\n\r\n  const onDragOver = useCallback((e) => {\r\n    e.preventDefault();\r\n    console.log(e);\r\n    setDragOver(true);\r\n  }, []);\r\n\r\n  if (!userData || !myData) {\r\n    return null;\r\n  }\r\n\r\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\r\n\r\n  return (\r\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\r\n      <Header>\r\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\r\n        <span>{userData.nickname}</span>\r\n      </Header>\r\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\r\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\r\n      {dragOver && <DragOver>업로드!</DragOver>}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DirectMessage;"],"sourceRoot":""}